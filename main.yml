---
- name: SoftSys Set Up
  hosts: 127.0.0.1
  connection: local
  vars:
    git_user_name: ""
    git_user_email: ""
    git_editor: "code"
    skip_git_editor: false
    skip_git_config: false
  tasks:
    - name: Check if git_user_name and git_user_email are provided
      fail:
        msg: "Both git_user_name and git_user_email are required."
      when: git_user_name == "" or git_user_email == ""

    - name: Install git (apt)
      become: true
      ansible.builtin.apt:
        name: git
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install git (Homebrew)
      community.general.homebrew:
        name: git
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Set Git editor
      command: git config --global core.editor "{{ git_editor }} --wait" 
      ignore_errors: # Ignore errors in case the core.editor is already set
      when: not skip_git_editor

    - name: Set Git user.name
      command: git config --global user.name "{{ git_user_name }}"
      ignore_errors: yes  # Ignore errors in case the user.name is already set
      when: not skip_git_config

    - name: Set Git user.email
      command: git config --global user.email "{{ git_user_email }}"
      ignore_errors: yes  # Ignore errors in case the user.email is already set
      when: not skip_git_config

    - name: Install gcc (apt)
      become: true
      ansible.builtin.apt:
        name: gcc
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install gcc (Homebrew)
      community.general.homebrew:
        name: gcc
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install gdb (apt)
      become: true
      ansible.builtin.apt:
        name: gdb
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install gdb (Homebrew)
      community.general.homebrew:
        name: gdb
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install make (apt)
      become: true
      ansible.builtin.apt:
        name: make
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install make (Homebrew)
      community.general.homebrew:
        name: make
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install cmake (apt)
      become: true
      ansible.builtin.apt:
        name: cmake
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install cmake (Homebrew)
      community.general.homebrew:
        name: cmake
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install C formatter/linter (apt)
      become: true
      ansible.builtin.apt:
        name:
          - clang-format
          - clang-tidy
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install C formatter/linter (Homebrew)
      community.general.homebrew:
        name:
          - clang-format
          - clang-tidy
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install Criterion (apt)
      become: true
      ansible.builtin.apt:
        name: libcriterion-dev
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install Criterion (Homebrew)
      community.general.homebrew:
        name: criterion
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install VSCode extensions
      ansible.builtin.shell: code --install-extension {{ item }}
      loop:
        - esbenp.prettier-vscode
        - ms-vscode.cpptools
        - ms-vscode.cmake-tools
        - xaver.clang-format
