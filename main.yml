---
- name: SoftSys Set Up
  hosts: 127.0.0.1
  connection: local
  vars:
    git_user_name: ""
    git_user_email: ""
    git_editor: "code"
    github_ssh_key_title: "SSH key for SoftSys"
    github_token: ""
    skip_git_editor: false
    skip_git_config: false
    skip_ssh: false
  tasks:
    - name: Check if git_user_name and git_user_email are provided
      fail:
        msg: "Please enter your git_user_name and git_user_email to set up the config or use the skip_git_config flag"
      when: (git_user_name == "" or git_user_email == "") and not skip_git_config

    - name: Check if github_token is provided
      fail:
        msg: "Please enter your github_token to add your ssh key or use the skip_ssh flag. If you need to generate a token, please refer to the README."
      when: (github_token == "") and not skip_ssh

    - name: Install VSCode (apt)
      block:
        - name: Install GPG
          become: true
          ansible.builtin.apt:
            name: gpg
        - name: Get Microsoft GPG key needed to add package repo
          ansible.builtin.get_url:
            url: https://packages.microsoft.com/keys/microsoft.asc
            dest: "{{ apt_key_download_path }}"
            force: true
          when: not ansible_check_mode  # (Bug ansible/ansible#65687)
          register: download_gpg_key
        # Docker has the file as an ASCII armored PGP block (starts and ends
        # with -----BEGIN PGP PUBLIC KEY BLOCK-----), and this needs to be
        # converted into a binary format before adding it to the set of apt
        # keyrings.
        - name: Dearmor GPG key and add to keyring
          become: true
          ansible.builtin.command:
            # The --yes flag ensures that the output keyring is overwritten in
            # case a new file was downloaded in the previous task.
            cmd: >-
              gpg --yes --dearmor -o {{ apt_keyring_path }}
              {{ apt_key_download_path }}
          when: download_gpg_key.changed
        - name: Get architecture name from dpkg
          ansible.builtin.command:
            cmd: dpkg --print-architecture
          changed_when: false
          register: dpkg_arch
        - name: Add VSCode repository
          become: true
          apt_repository:
            filename: vscode
            repo: >-
              deb [arch={{ dpkg_arch.stdout }} signed-by={{ apt_keyring_path }}]
              https://packages.microsoft.com/repos/code stable main
            state: present
            update_cache: true
        - name: Install VSCode (apt)
          become: true
          ansible.builtin.apt:
            name: code
            state: present
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install VSCode (Homebrew)
      community.general.homebrew_cask:
        name: visual-studio-code
        state: present
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install git (apt)
      become: true
      ansible.builtin.apt:
        name: git
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install git (Homebrew)
      community.general.homebrew:
        name: git
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Set Git editor
      command: git config --global core.editor "{{ git_editor }} --wait" 
      ignore_errors: # Ignore errors in case the core.editor is already set
      when: not skip_git_editor

    - name: Set Git user.name
      command: git config --global user.name "{{ git_user_name }}"
      ignore_errors: yes
      when: not skip_git_config

    - name: Set Git user.email
      command: git config --global user.email "{{ git_user_email }}"
      ignore_errors: yes
      when: not skip_git_config

    - name: Install gcc (apt)
      become: true
      ansible.builtin.apt:
        name: gcc
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install gcc (Homebrew)
      community.general.homebrew:
        name: gcc
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install gdb (apt)
      become: true
      ansible.builtin.apt:
        name: gdb
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install gdb (Homebrew)
      community.general.homebrew:
        name: gdb
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install make (apt)
      become: true
      ansible.builtin.apt:
        name: make
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install make (Homebrew)
      community.general.homebrew:
        name: make
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install cmake (apt)
      become: true
      ansible.builtin.apt:
        name: cmake
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install cmake (Homebrew)
      community.general.homebrew:
        name: cmake
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install C formatter/linter (apt)
      become: true
      ansible.builtin.apt:
        name:
          - clang-format
          - clang-tidy
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install C formatter/linter (Homebrew)
      community.general.homebrew:
        name:
          - clang-format
          - clang-tidy
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install Criterion (apt)
      become: true
      ansible.builtin.apt:
        name: libcriterion-dev
      when: ansible_facts['distribution'] == "Ubuntu"

    - name: Install Criterion (Homebrew)
      community.general.homebrew:
        name: criterion
      when: ansible_facts['distribution'] == "MacOSX"

    - name: Install VSCode extensions
      ansible.builtin.shell: code --install-extension {{ item }}
      loop:
        - esbenp.prettier-vscode
        - ms-vscode.cpptools
        - ms-vscode.cmake-tools
        - xaver.clang-format

    - name: Create SSH Key
      command: ssh-keygen -t ecdsa -N "" -f $HOME/.ssh/id_ecdsa
      args:
        creates: "{{ ansible_env.HOME }}/.ssh/id_ecdsa"
      when: not skip_ssh

    - name: Retrieve SSH Public Key
      command: cat $HOME/.ssh/id_ecdsa.pub
      register: public_key
      when: not skip_ssh

    - name: Add SSH Key to GitHub
      uri:
        url: https://api.github.com/user/keys
        method: POST
        body_format: json
        headers:
          Authorization: "token {{ github_token }}"
          Content-Type: "application/json"
        body:
          title: "{{ github_ssh_key_title }}"
          key: "{{ public_key.stdout }}"
      register: result
      ignore_errors: true
      when: not skip_ssh

